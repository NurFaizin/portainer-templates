version: '3.8'

volumes:
  db_storage:
  n8n_storage:
  redis_storage:

networks:
  traefik-public:
    external: true

x-shared: &shared
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_PORT=5432
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - EXECUTIONS_MODE=queue
    - QUEUE_BULL_REDIS_HOST=redis
    - QUEUE_HEALTH_CHECK_ACTIVE=true
  volumes:
    - n8n_storage:/home/node/.n8n
  depends_on:
    - redis
    - postgres

services:
  postgres:
    image: postgres:11
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - db_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:6-alpine
    volumes:
      - redis_storage:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n:
    <<: *shared
    image: n8nio/n8n:${IMAGE_TAG}
    command: /bin/sh -c "n8n start --tunnel"
    networks:
      - default
      - traefik-public
    deploy:
      labels:
        - traefik.enable=${PROXY_ENABLE}
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.${PROXY_NAME}-http.rule=Host(`${PROXY_DOMAIN}`)
        - traefik.http.routers.${PROXY_NAME}-http.entrypoints=http
        - traefik.http.routers.${PROXY_NAME}-http.middlewares=https-redirect
        - traefik.http.routers.${PROXY_NAME}-https.rule=Host(`${PROXY_DOMAIN}`)
        - traefik.http.routers.${PROXY_NAME}-https.entrypoints=https
        - traefik.http.routers.${PROXY_NAME}-https.tls=true
        - traefik.http.routers.${PROXY_NAME}-https.tls.certresolver=le
        - traefik.http.services.${PROXY_NAME}.loadbalancer.server.port=5678

  n8n-worker:
    <<: *shared
    image: n8nio/n8n:${IMAGE_TAG}
    command: /bin/sh -c "sleep 5; n8n worker"
    depends_on:
      - n8n
    deploy:
      resources:
        limits:
          cpus: ${LIMIT_CPU}
          memory: ${LIMIT_MEMORY}
      labels:
        - autoscale.enable=${AUTOSCALE_ENABLE}
        - autoscale.replicas.min=${AUTOSCALE_REPLICAS_MIN}
        - autoscale.replicas.max=${AUTOSCALE_REPLICAS_MAX}
